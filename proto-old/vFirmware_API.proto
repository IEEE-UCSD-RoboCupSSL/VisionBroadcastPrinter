syntax = "proto3";


message Vec_2D {
    float x = 1;
    float y = 2;
}

/* commands to be sent from the application layer to the firmware layer */
message VF_Commands {
    /* set true only once at the beginning to initialize the sensor systems */
    bool init = 1; 
    
    /* motion cmd to make the robot move at direction of cartesian vector (x, y)
     * with unit represented by percentage of maximum motor output
     * unit range: (-100 ~ 100) x (-100 ~ 100) where 100 corresponds to 100 percent 
     * of motor maximum speed 
     */
    Vec_2D translational_output = 2;

    /* similar to the above, motor cmd for rotation, + rotate counterclockwise, - rotate clockwise, 
     * unit range -100 ~ 100
     */
    float rotational_output = 3;

    /* Kicker(+chipper) cmd represented in vector (x, z)
     * with unit range (-100 ~ 100) x (-100 ~ 100) 
     * x corresponds to horizontal kick strength
     * z corresponds to vertical kick strength
     */
    Vec_2D kicker = 4;

    /* set true to turn dribbler on, false to turn off */
    bool dribbler = 5; 
}


/* data to be received from the firmware layer to the application layer */
message VF_Data {
    /* unit: millimeter */
    Vec_2D translational_displacement = 1;

    /* unit: millimeter/milliseconds, which is m/s */
    Vec_2D translational_velocity = 2;

    /* unit: degree (0 ~ 180) for the left half, 
     *              (0 ~ -180) for the right half
     */
    float rotational_displacement = 3;
    
    /* unit: degree/millisecond, sign transition from 180 to -180 is handled */
    float rotational_velocity = 4;
}
